"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.NextRebase = void 0;
var graph_ts_1 = require("@graphprotocol/graph-ts");
var NextRebase = /** @class */ (function (_super) {
    __extends(NextRebase, _super);
    function NextRebase(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    NextRebase.prototype.save = function () {
        var id = this.get("id");
        assert(id !== null, "Cannot save NextRebase entity without an ID");
        assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save NextRebase entity with non-string ID. " +
            'Considering using .toHex() to convert the "id" to a string.');
        graph_ts_1.store.set("NextRebase", id.toString(), this);
    };
    NextRebase.load = function (id) {
        return graph_ts_1.store.get("NextRebase", id);
    };
    Object.defineProperty(NextRebase.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NextRebase.prototype, "nextRebaseInSeconds", {
        get: function () {
            var value = this.get("nextRebaseInSeconds");
            if (value === null || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("nextRebaseInSeconds");
            }
            else {
                this.set("nextRebaseInSeconds", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NextRebase.prototype, "previousRebase", {
        get: function () {
            var value = this.get("previousRebase");
            if (value === null || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigDecimal();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("previousRebase");
            }
            else {
                this.set("previousRebase", graph_ts_1.Value.fromBigDecimal(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NextRebase.prototype, "nextRebase", {
        get: function () {
            var value = this.get("nextRebase");
            if (value === null || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigDecimal();
            }
        },
        set: function (value) {
            if (value === null) {
                this.unset("nextRebase");
            }
            else {
                this.set("nextRebase", graph_ts_1.Value.fromBigDecimal(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return NextRebase;
}(graph_ts_1.Entity));
exports.NextRebase = NextRebase;
